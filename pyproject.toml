# LXthon 2025 - Eye Vessel Segmentation Project
# Team Prometheus: Guilherme Grancho & Vasco Pereira

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "lxthon-eye-vessel-segmentation"
version = "1.0.0"
description = "LXthon 2025 - Eye Vessel Segmentation using U-Net Deep Learning"
authors = [
    {name = "Guilherme Grancho", email = "guilhermegrancho@outlook.com"},
    {name = "Vasco Pereira", email = "vasco.pereira@example.com"},
]
maintainers = [
    {name = "Team Prometheus", email = "team.prometheus@lxthon.com"},
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
keywords = [
    "computer-vision", 
    "medical-imaging", 
    "deep-learning", 
    "u-net", 
    "vessel-segmentation",
    "lxthon",
    "hackathon"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: JavaScript",
    "Programming Language :: TypeScript",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
    "Framework :: React",
]

dependencies = [
    # Core dependencies for the project
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
# Backend dependencies
backend = [
    "fastapi==0.115.7",
    "uvicorn[standard]==0.34.3",
    "tensorflow==2.16.1",
    "opencv-python==4.10.0.84",
    "Pillow==11.1.0",
    "numpy>=1.23.5,<2.0",
    "python-multipart==0.0.19",
    "aiofiles==24.1.0",
    "pydantic==2.11.6",
    "scikit-image==0.24.0",
    "matplotlib==3.10.3",
]

# Development dependencies
dev = [
    "ruff>=0.9.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.28.1",
    "pre-commit>=4.1.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

# Data science dependencies
ml = [
    "pandas>=2.0.0",
    "numpy>=1.23.5,<2.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]

# All dependencies for complete development setup
all = [
    "lxthon-eye-vessel-segmentation[backend,dev,ml,docs]",
]

[project.urls]
Homepage = "https://github.com/guilhermegranchopro/LXthon"
Repository = "https://github.com/guilhermegranchopro/LXthon"
Documentation = "https://github.com/guilhermegranchopro/LXthon/tree/main/docs"
Issues = "https://github.com/guilhermegranchopro/LXthon/issues"
Changelog = "https://github.com/guilhermegranchopro/LXthon/blob/main/CHANGELOG.md"

[project.scripts]
lxthon-backend = "src.backend.app.main:main"
lxthon-train = "scripts.data.train_model:main"
lxthon-demo = "scripts.data.standalone_demo:main"

# Tool configurations
[tool.hatch.version]
path = "src/backend/app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/backend", "src/shared"]

# Ruff configuration for code quality
[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src", "tests", "scripts"]

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # line too long (handled by line-length)
    "S101",  # assert (useful in tests)
    "T201",  # print statements (useful for demos)
    "S608",  # possible SQL injection (false positives)
]

exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
    "archived",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"scripts/*" = ["T201", "S101"]
"tests/*" = ["S101", "T201"]
"notebooks/*" = ["T201", "E402"]

[tool.ruff.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.mccabe]
max-complexity = 10

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "tests", "scripts"]
known_first_party = ["src"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "cv2.*",
    "PIL.*",
    "matplotlib.*",
    "numpy.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "ml: marks tests as machine learning tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
