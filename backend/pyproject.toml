[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "eye-vessel-segmentation-backend"
version = "1.0.0"
description = "Eye vessel segmentation backend using U-Net deep learning model"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
authors = [
    {name = "Guilherme Grancho", email = "guilhermegrancho@example.com"},
]
keywords = ["computer-vision", "medical-imaging", "deep-learning", "u-net", "vessel-segmentation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "tensorflow==2.15.0",
    "opencv-python==4.8.1.78",
    "Pillow==10.1.0",
    "numpy==1.24.3",
    "python-multipart==0.0.6",
    "aiofiles==23.2.1",
    "pydantic==2.5.0",
    "scikit-image==0.21.0",
    "matplotlib==3.7.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",  # For testing FastAPI
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/guilhermegranchopro/LXthon"
Repository = "https://github.com/guilhermegranchopro/LXthon"
Issues = "https://github.com/guilhermegranchopro/LXthon/issues"

# Ruff configuration
[tool.ruff]
# Set the maximum line length to 88 (black's default)
line-length = 88
# Target Python 3.9+
target-version = "py39"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by line-length)
    "S101",  # assert (useful in tests)
    "T201",  # print statements (useful for debugging)
    "S608",  # possible SQL injection (false positives with SQLAlchemy)
]

# Exclude specific directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
# Ignore import errors in __init__.py files
"__init__.py" = ["F401", "F403"]
# Allow print statements in scripts
"scripts/*" = ["T201"]
# Allow assert in tests
"tests/*" = ["S101"]

[tool.ruff.isort]
# Group imports
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.mccabe]
# Complexity threshold
max-complexity = 10

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
